{
  data_module: {
    type: map

    setup: {
      dataset_files: {
        train_data_path: "data/train_trx.parquet"
        test_data_path: "data/test_trx.parquet"
      }
      col_id: client_id
      col_id_dtype: str
      col_target: age

      split_by: embeddings_validation
      fold_info: "conf/embeddings_validation.work/folds/folds.json"
    }

    train: {
        min_seq_len: 0
        augmentations: [
            [DropoutTrx, {trx_dropout: 0.03}]
            [DropDay, {}]
            [RandomSlice, {min_len: 50, max_len: 150, rate_for_min: 0.9}]
            [AllTimeShuffle, {}]
        ]
        num_workers: 16
        batch_size: 32
    }

    valid: {
        augmentations: [
            [SeqLenLimit, {max_seq_len: 800}]
        ]
        num_workers: 8
        batch_size: 256
    }
  }

  embedding_validation_results: {
    model_name: nn
    feature_name: target_scores
    output_path: "results/fit_target_results.json"
  }

  seed_everything: 42
  trainer: {
    gpus: 1
    auto_select_gpus: false

    max_epochs: 10

    checkpoint_callback: false
    deterministic: True
  }
  logger_name: target_scores

  col_target_name: target_age,

  params: {
    score_metric: [accuracy]

    encoder_type: rnn,
    trx_encoder: {
      norm_embeddings: false,
      embeddings_noise: 0.003,
      embeddings: {
        level_3: {in: 200, out: 16},
        level_4: {in: 800, out: 16},
        segment_id: {in: 120, out: 16}
      },
      numeric_values: {
        trn_sum_from_iss: identity,
        netto: identity,
        regular_points_received: identity,
      }
    },
    rnn: {
      type: gru,
      hidden_size: 96,
      bidir: false,
      trainable_starter: static
    },

    head_layers: [
        [Linear, {"in_features": "{seq_encoder.embedding_size}", "out_features": 4}]
        [LogSoftmax, {dim: 1}]
    ]

    train: {
      loss: NLLLoss,
      lr: 0.004,
      weight_decay: 0.0,
    },
    lr_scheduler: {
      step_size: 1,
      step_gamma: 0.85
    }
  }
}
