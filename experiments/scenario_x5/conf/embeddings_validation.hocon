{
    environment: {
        work_dir: "embeddings_validation.work"
    }
    report_file: "../results/scenario_x5.txt"

    target: {
        file_name: "../data/clients_target.csv"
        cols_id: [client_id]
        cols_id_type: [str]
        col_target: age
    }

    split: {
        fit_ids: true

        train_id: {
            file_name: "../data/clients_target.csv"
        }
        test_id: {
            file_name: "../data/test_ids.csv"
        }

        cv_split_count: 5
        is_stratify: true
        random_state: 42
    }

    features: {
        baseline: {
            enabled: true
            read_params: {file_name: ../data/agg_feat_embed.pickle}
            target_options: {}
        }
        cpc_embeddings: {
            enabled: true
            read_params: {file_name: ../data/cpc_embeddings.pickle}
            target_options: {}
        }
        mles_embeddings: {
            enabled: true
            read_params: {file_name: ../data/mles_embeddings.pickle}
            target_options: {}
        }
    }

    external_scores: {
        0: "../results/fit_target_results.json"
        1: "../results/mles_finetuning_results.json"
        2: "../results/cpc_finetuning_results.json"
    }

    models: {
        linear: {
            enabled: false
            cls_name: sklearn.linear_model.LogisticRegression
            params: {},
            cpu_count: 1
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
        lgbm: {
            enabled: true
            cls_name: lightgbm.LGBMClassifier,
            params: {
                n_estimators=1000,
                boosting_type="gbdt",
                objective="multiclass",
                num_class=4,
                metric="multi_error",
                subsample=0.5,
                subsample_freq=1,
                learning_rate=0.05,
                feature_fraction=0.75, colsample_bytree=null,
                max_depth=6,
                lambda_l1=1, reg_alpha=null,
                lambda_l2=1, reg_lambda=null,
                min_data_in_leaf=50, min_child_samples=null,
                num_leaves=50,
                random_state=42,
                n_jobs=6,
            },
            cpu_count: 6
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
        xgb: {
            enabled: false
            cls_name: xgboost.XGBClassifier
            params: {
                n_jobs=4,
                objective="multi:softprob",
                num_class=4,
                seed=42,
                n_estimators=300,
            },
            cpu_count: 4
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
    }

    metrics: {
        accuracy: {
            enabled: true
            score_func: sklearn.metrics.accuracy_score
            scorer_params: {needs_proba: false}
        }
    }

    report: {
        is_check_train: false
        error_handling: fail
        print_all_metrics: true

        metrics: {
            accuracy: {float_format: "{:.3f}", baseline_key=["lgbm", "baseline"], split_columns: true}

            cnt_features: {float_format: "{:.0f}", keep_columns: ["mean"]}
            cnt_samples: {float_format: "{:9,.0f}", keep_columns: ["mean"]}

            feature_load_time: {float_format: "{:,.1f}"}
            train_fit_transform_time: {float_format: "{:,.1f}"}
            feature_transform_time: {float_format: "{:,.1f}"}
            train_time: {float_format: "{:,.1f}"}

            feature_fit_info: {keep_columns: ["first"]}
        }
    }
}
